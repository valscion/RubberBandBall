package com.vesalaakso.rbb.controller;

import java.util.LinkedList;
import java.util.List;

import org.newdawn.slick.Input;
import org.newdawn.slick.KeyListener;
import org.newdawn.slick.MouseListener;

/**
 * Handles the coordination of different input based controllers.
 * 
 * @author Vesa Laakso
 */
public class InputMaster implements Updateable {

	/** The input that generates events */
	private Input input;

	/** Controllers which listen for keyboard input. */
	//private List<KeyListener> keyListeners = new LinkedList<KeyListener>();

	/** Controllers which listen for mouse input. */
	//private List<MouseListener> mouseListeners =
	//	new LinkedList<MouseListener>();
	
	/** List of controllers which would like to act upon every frame. */
	private List<Updateable> updateables = new LinkedList<Updateable>();

	/**
	 * Constructs an InputMaster and associates it with the given
	 * <code>Input</code>.
	 * 
	 * @param input
	 *            The <code>Input</code> that will generate events to listen to.
	 */
	public InputMaster(Input input) {
		this.input = input;
	}

	/**
	 * Makes the input generate events for the given <code>KeyListener</code>.
	 * 
	 * @param controller
	 *            the controller implementing <code>KeyListener</code> interface
	 *            and acting upon events generated by key pressed.
	 */
	public void addKeyListener(KeyListener controller) {
		input.addKeyListener(controller);
		if (controller instanceof Updateable) {
			updateables.add((Updateable) controller);
		}
	}

	/**
	 * Makes the input generate events for the given <code>MouseListener</code>.
	 * 
	 * @param controller
	 *            the controller implementing <code>MouseListener</code>
	 *            interface and acting upon events generated by mouse.
	 */
	public void addMouseListener(MouseListener controller) {
		input.addMouseListener(controller);
		if (controller instanceof Updateable) {
			updateables.add((Updateable) controller);
		}
	}

	/**
	 * Calls the update()-method on all attached <code>Controller</code>s.
	 * 
	 * @param delta
	 *            The amount of time thats passed since last update in
	 *            milliseconds
	 * 
	 * @see Controller#update(int)
	 */
	@Override
	public void update(int delta) {
		for (Updateable c : updateables) {
			c.update(delta);
		}
	}

}
